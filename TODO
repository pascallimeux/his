X faire un container docker pour la livraison
X Gestion des logs avec go-logging
X resoudre pb de transaction avec ack
X ecrire les scripts startHP/stopHP/cleanHP
X renommer le projet en HIS et créer dans github
X separer le code de consent et de his
X faire des tests avec plusieurs containers (pour comprendre le fonctionnement de keystore et enroll_user etc)
X verifier le fonctionnement des logs entre sdk et his avec fichier et niveau
X mettre des logs pour chaque appel de fonction et chaque erreur
X retour d'erreur des API
X ajouter une fonction ownerconsumer au smartcontract  + tests
X ajouter une api pour his (ownerconsumer) + tests
X voir le paramétage pour configurer le numéro IP pour le sdk-go
X faire un makefile cf celui du sdk, (depends, tests unitaires, integration, docker image avec parametrage des ips, update sdk avec govendor etc..
X mettre les APIs en https


- analyser block et transaction
- verifier les objets (string) renvoyés par les api de type query
- ajouter un swagger
- ajouter les APIs : deploySC, addPeer, addOrderer, createChannel
- creer manuellement un nouveau peer
- creer un nouveau SC et le module associé
- creer un nouveau channel
- refactorer le code
- refactorer le paramétrage
- refactorer les APIs
- refactoriser le code (majuscule, methode publique etc.)


faire les slides:
    construire un peer
    construire un orderer
    construire un ca
    parametrer ca/orderer/peer
    construire le reseau docker
    générer le fichier channel.tx

- corriger le makefile
- tester les get sur client et sur chain et prevoir api pour deploiement de peer etc...
- faire les classes de tests associées aux handler et aux helpers et verifier le contenu des tests
- faire les tests postman et tests de monte en charge et monté en charge multi thread
- verifier la cohérence et l'utilité des test unitaires et d'intégration

- configurer postman pour le https
- resoudre le problème des log dans un chaincode
- les api query qui ne fonctionnent pas
- A quoi serts le provider name ?

----------------------------------------------------------------------------------------
go get -u github.com/go-swagger/go-swagger/cmd/swagger
cd ../cmg/swagger
go install swagger.go

go get github.com/go-openapi/runtime
go get github.com/tylerb/graceful
go get github.com/jessevdk/go-flags
go get golang.org/x/net/context


cd his
swagger generate spec -o ./swagger.json

swagger validate https://raw.githubusercontent.com/swagger-api/swagger-spec/master/examples/v2.0/json/petstore-expanded.json
swagger generate server [-f ./swagger.json] -A [application-name [--principal [principal-name]]
swagger generate client [-f ./swagger.json] -A [application-name [--principal [principal-name]]

swagger generate server -A AuthSample -P models.Principal -f ./swagger.yml


swagger init spec \
  --title "H.I.S application" \
  --description "Hyperledger Interface Server" \
  --version 1.0.0 \
  --scheme http \
  --consumes /his/v0/dashboard/+json \
  --produces /his/v0/dashboard/+json

swagger validate ./swagger.yml

swagger generate server -A TodoList -f ./swagger.yml