package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
)

// IsConsentOKCode is the HTTP code returned for type IsConsentOK
const IsConsentOKCode int = 200

/*IsConsentOK is the consent exist

swagger:response isConsentOK
*/
type IsConsentOK struct {
	/*
	  Required: true
	*/
	Isconsent string `json:"isconsent"`
}

// NewIsConsentOK creates IsConsentOK with default headers values
func NewIsConsentOK() *IsConsentOK {
	return &IsConsentOK{}
}

// WithIsconsent adds the isconsent to the is consent o k response
func (o *IsConsentOK) WithIsconsent(isconsent string) *IsConsentOK {
	o.Isconsent = isconsent
	return o
}

// SetIsconsent sets the isconsent to the is consent o k response
func (o *IsConsentOK) SetIsconsent(isconsent string) {
	o.Isconsent = isconsent
}

// WriteResponse to the client
func (o *IsConsentOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header isconsent

	isconsent := o.Isconsent
	if isconsent != "" {
		rw.Header().Set("isconsent", isconsent)
	}

	rw.WriteHeader(200)
}

/*IsConsentDefault Genric error for API

swagger:response isConsentDefault
*/
type IsConsentDefault struct {
	_statusCode int
	/*in: path
	  Required: true
	*/
	Code int64 `json:"code"`
	/*
	  Required: true
	*/
	Message string `json:"message"`
}

// NewIsConsentDefault creates IsConsentDefault with default headers values
func NewIsConsentDefault(code int) *IsConsentDefault {
	if code <= 0 {
		code = 500
	}

	return &IsConsentDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the is consent default response
func (o *IsConsentDefault) WithStatusCode(code int) *IsConsentDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the is consent default response
func (o *IsConsentDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithCode adds the code to the is consent default response
func (o *IsConsentDefault) WithCode(code int64) *IsConsentDefault {
	o.Code = code
	return o
}

// SetCode sets the code to the is consent default response
func (o *IsConsentDefault) SetCode(code int64) {
	o.Code = code
}

// WithMessage adds the message to the is consent default response
func (o *IsConsentDefault) WithMessage(message string) *IsConsentDefault {
	o.Message = message
	return o
}

// SetMessage sets the message to the is consent default response
func (o *IsConsentDefault) SetMessage(message string) {
	o.Message = message
}

// WriteResponse to the client
func (o *IsConsentDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	// response header code

	code := swag.FormatInt64(o.Code)
	if code != "" {
		rw.Header().Set("code", code)
	}

	// response header message

	message := o.Message
	if message != "" {
		rw.Header().Set("message", message)
	}

	rw.WriteHeader(o._statusCode)
}
