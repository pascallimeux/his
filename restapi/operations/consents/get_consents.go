package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetConsentsHandlerFunc turns a function with the right signature into a get consents handler
type GetConsentsHandlerFunc func(GetConsentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConsentsHandlerFunc) Handle(params GetConsentsParams) middleware.Responder {
	return fn(params)
}

// GetConsentsHandler interface for that can handle valid get consents params
type GetConsentsHandler interface {
	Handle(GetConsentsParams) middleware.Responder
}

// NewGetConsents creates a new http.Handler for the get consents operation
func NewGetConsents(ctx *middleware.Context, handler GetConsentsHandler) *GetConsents {
	return &GetConsents{Context: ctx, Handler: handler}
}

/*GetConsents swagger:route GET /his/v0/api/app/{appid}/consents consents getConsents

GetConsents get consents API

*/
type GetConsents struct {
	Context *middleware.Context
	Handler GetConsentsHandler
}

func (o *GetConsents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetConsentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
