package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteConsentsHandlerFunc turns a function with the right signature into a delete consents handler
type DeleteConsentsHandlerFunc func(DeleteConsentsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConsentsHandlerFunc) Handle(params DeleteConsentsParams) middleware.Responder {
	return fn(params)
}

// DeleteConsentsHandler interface for that can handle valid delete consents params
type DeleteConsentsHandler interface {
	Handle(DeleteConsentsParams) middleware.Responder
}

// NewDeleteConsents creates a new http.Handler for the delete consents operation
func NewDeleteConsents(ctx *middleware.Context, handler DeleteConsentsHandler) *DeleteConsents {
	return &DeleteConsents{Context: ctx, Handler: handler}
}

/*DeleteConsents swagger:route DELETE /his/v0/api/app/{appid}/consents consents deleteConsents

DeleteConsents delete consents API

*/
type DeleteConsents struct {
	Context *middleware.Context
	Handler DeleteConsentsHandler
}

func (o *DeleteConsents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteConsentsParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
