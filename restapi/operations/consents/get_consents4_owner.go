package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetConsents4OwnerHandlerFunc turns a function with the right signature into a get consents4 owner handler
type GetConsents4OwnerHandlerFunc func(GetConsents4OwnerParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConsents4OwnerHandlerFunc) Handle(params GetConsents4OwnerParams) middleware.Responder {
	return fn(params)
}

// GetConsents4OwnerHandler interface for that can handle valid get consents4 owner params
type GetConsents4OwnerHandler interface {
	Handle(GetConsents4OwnerParams) middleware.Responder
}

// NewGetConsents4Owner creates a new http.Handler for the get consents4 owner operation
func NewGetConsents4Owner(ctx *middleware.Context, handler GetConsents4OwnerHandler) *GetConsents4Owner {
	return &GetConsents4Owner{Context: ctx, Handler: handler}
}

/*GetConsents4Owner swagger:route GET /his/v0/api/app/{appid}/owner/{ownerid}/consents consents getConsents4Owner

GetConsents4Owner get consents4 owner API

*/
type GetConsents4Owner struct {
	Context *middleware.Context
	Handler GetConsents4OwnerHandler
}

func (o *GetConsents4Owner) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetConsents4OwnerParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
