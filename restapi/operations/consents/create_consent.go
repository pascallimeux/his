package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// CreateConsentHandlerFunc turns a function with the right signature into a create consent handler
type CreateConsentHandlerFunc func(CreateConsentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateConsentHandlerFunc) Handle(params CreateConsentParams) middleware.Responder {
	return fn(params)
}

// CreateConsentHandler interface for that can handle valid create consent params
type CreateConsentHandler interface {
	Handle(CreateConsentParams) middleware.Responder
}

// NewCreateConsent creates a new http.Handler for the create consent operation
func NewCreateConsent(ctx *middleware.Context, handler CreateConsentHandler) *CreateConsent {
	return &CreateConsent{Context: ctx, Handler: handler}
}

/*CreateConsent swagger:route POST /his/v0/api/app/{appid}/consents consents createConsent

CreateConsent create consent API

*/
type CreateConsent struct {
	Context *middleware.Context
	Handler CreateConsentHandler
}

func (o *CreateConsent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewCreateConsentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
