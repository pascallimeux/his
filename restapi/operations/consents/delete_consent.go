package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// DeleteConsentHandlerFunc turns a function with the right signature into a delete consent handler
type DeleteConsentHandlerFunc func(DeleteConsentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConsentHandlerFunc) Handle(params DeleteConsentParams) middleware.Responder {
	return fn(params)
}

// DeleteConsentHandler interface for that can handle valid delete consent params
type DeleteConsentHandler interface {
	Handle(DeleteConsentParams) middleware.Responder
}

// NewDeleteConsent creates a new http.Handler for the delete consent operation
func NewDeleteConsent(ctx *middleware.Context, handler DeleteConsentHandler) *DeleteConsent {
	return &DeleteConsent{Context: ctx, Handler: handler}
}

/*DeleteConsent swagger:route DELETE /his/v0/api/app/{appid}/consents/{consentid} consents deleteConsent

DeleteConsent delete consent API

*/
type DeleteConsent struct {
	Context *middleware.Context
	Handler DeleteConsentHandler
}

func (o *DeleteConsent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewDeleteConsentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
