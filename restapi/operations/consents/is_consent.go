package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// IsConsentHandlerFunc turns a function with the right signature into a is consent handler
type IsConsentHandlerFunc func(IsConsentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsConsentHandlerFunc) Handle(params IsConsentParams) middleware.Responder {
	return fn(params)
}

// IsConsentHandler interface for that can handle valid is consent params
type IsConsentHandler interface {
	Handle(IsConsentParams) middleware.Responder
}

// NewIsConsent creates a new http.Handler for the is consent operation
func NewIsConsent(ctx *middleware.Context, handler IsConsentHandler) *IsConsent {
	return &IsConsent{Context: ctx, Handler: handler}
}

/*IsConsent swagger:route POST /his/v0/api/app/{appid}/isconsent consents isConsent

IsConsent is consent API

*/
type IsConsent struct {
	Context *middleware.Context
	Handler IsConsentHandler
}

func (o *IsConsent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewIsConsentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
