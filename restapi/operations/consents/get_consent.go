package consents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetConsentHandlerFunc turns a function with the right signature into a get consent handler
type GetConsentHandlerFunc func(GetConsentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConsentHandlerFunc) Handle(params GetConsentParams) middleware.Responder {
	return fn(params)
}

// GetConsentHandler interface for that can handle valid get consent params
type GetConsentHandler interface {
	Handle(GetConsentParams) middleware.Responder
}

// NewGetConsent creates a new http.Handler for the get consent operation
func NewGetConsent(ctx *middleware.Context, handler GetConsentHandler) *GetConsent {
	return &GetConsent{Context: ctx, Handler: handler}
}

/*GetConsent swagger:route GET /his/v0/api/app/{appid}/consents/{consentid} consents getConsent

GetConsent get consent API

*/
type GetConsent struct {
	Context *middleware.Context
	Handler GetConsentHandler
}

func (o *GetConsent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, _ := o.Context.RouteInfo(r)
	var Params = NewGetConsentParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
