package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Consent consent
// swagger:model Consent
type Consent struct {

	// app ID
	// Required: true
	AppID *string `json:"appid"`

	// consent ID
	// Required: true
	ConsentID *string `json:"consentid"`

	// consumer ID
	// Required: true
	ConsumerID *string `json:"consumerid"`

	// data access
	DataAccess string `json:"dataaccess,omitempty"`

	// data type
	DataType string `json:"datatype,omitempty"`

	// dt begin
	DtBegin string `json:"dtbegin,omitempty"`

	// dt end
	DtEnd string `json:"dtend,omitempty"`

	// owner ID
	// Required: true
	OwnerID *string `json:"ownerid"`
}

// Validate validates this consent
func (m *Consent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConsentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConsumerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOwnerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Consent) validateAppID(formats strfmt.Registry) error {

	if err := validate.Required("appid", "body", m.AppID); err != nil {
		return err
	}

	return nil
}

func (m *Consent) validateConsentID(formats strfmt.Registry) error {

	if err := validate.Required("consentid", "body", m.ConsentID); err != nil {
		return err
	}

	return nil
}

func (m *Consent) validateConsumerID(formats strfmt.Registry) error {

	if err := validate.Required("consumerid", "body", m.ConsumerID); err != nil {
		return err
	}

	return nil
}

func (m *Consent) validateOwnerID(formats strfmt.Registry) error {

	if err := validate.Required("ownerid", "body", m.OwnerID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Consent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Consent) UnmarshalBinary(b []byte) error {
	var res Consent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
